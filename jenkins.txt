==========================
JENKINS KEY TERMINOLOGIES
==========================
- Job/Project
- Node
- Build
- Plugin
- Workspace

==============
SETUP JENKINS
==============
WALKTHROUGH OF JENKINS DASHBOARD
=================================
- Manage Jenkins >> System
- Manage Jenkins >> Tools
- Manage Jenkins >> Plugins
- Manage Jenkins >> Nodes
- Manage Jenkins >> Users

Lab-01 - Add Project Information
-----------------------------------
Manage Jenkins >> System >> System Message >> "Deployment details"


Lab-02 - Creating user & grant permissions
-------------------------------------------
- Manage Jenkins >> Users >> Create user

Security Realm (Authentication)
- Manage Jenkins >> Security >> Security Realm >> Jenkins own user database

Authorization
- Manage Jenkins >> Security >> Authorization >> Matrix based security

Lab-03 - RBAC for jenkins users
---------------------------------
- Install "Role-based authorization strategy" plugin
Manage Jenkins >> Plugins >> Installed plugins >> Role-based authorization strategy

- Now, navigate to Manage Jenkins >> Security >> Authorization >> <you will see a new option> "role-based strategy" >> Save
- Next, to configure RBAC >> Manage jenkins >> Manage and Assign roles >> Role to add >> manager & devops-engg >> click Add
- Then, Assign the users to the created roles Manage Jenkins >> Manage and Assign Roles >> Assign Roles >> Select the users & roles


Lab-04 - Create our first Jenkins job
------------------------------------------
Name: hello-world 
type: freestyle project
description
Build steps: 
  cd /
  ls -la

- Demonstrate configure, console output options

Lab-05 - Create a Jenkins job for executing java application
-------------------------------------------------------------
Name: hello-world 
Type: freestyle project
Build Trigger: Manual
Build steps: 
  cd <java_app_directory_location>
  javac HelloWorld.java
  java HelloWorld

[Build now | Should see hello world message]

[(optional) Try with Build Trigger: Trigger build remotely >> generate token >> access remote url in the browser]


Lab-XX - Jenkins Job chaining
------------------------------
- Create 3 jobs, namely Job-01, Job-02, Job-03
- Now, configure Job-01 >> Post-build actions >> Build other projects >> Job-02
- Then configure Job-03 >> Build Triggers >> Build after other projects are build >> Job-02


====================================
CONTINUOUS INTEGRATION WITH JENKINS
====================================

There are 2 way of integrating Jenkins with Github:
- Git SCM polling
- Webhooks

Lab-XX - Jenkins integration with github using webhooks
-------------------------------------------------------
- Develop the app and push it in Github repo
- Setup Jenkins server
- Create a Github webhook
  - http://<jenkins_server_ip>:8080/github-webhook/
  - Push events only
- Create a Jenkins job
  - Type: Freestyle
  - SCM: Git >> add github URL >> branch

Lab-XX - Jenkins integration with github using poll SCM
-------------------------------------------------------
- To communication with jenkins, you should've git plugin
  Manage Jenkins >> Plugins >> Installed >> Git plugin

- Create a new Github repo
- Develop and push the developed java app to github repo
- Create a new jenkins job >> 
  >> Enable "GitHub project" checkbox >> Copy the repo page URL (not repo URL .git)
  >> Source code management >> Git >> REPO_URL
  >> Build Trigger: Poll SCM
     >> For running job every min : * * * * * 

Lab-XX - Compile & Build maven application using Jenkins with Github webhook
-----------------------------------------------------------------------------
# INSTALL MAVEN 

# SETTING UP MAVEN PROJECT

# JENKINS INTEGRATION WITH MAVEN - 01

# JENKINS INTEGRATION WITH MAVEN - 02 (using maven integration plugin)

# BUILD MAVEN APP USING JENKINS

Lab-XX - Sending Email notification with Jenkins
-------------------------------------------------

Lab-XX - Static code Analysis with SonarQube (locally)
------------------------------------------------------
- To download  SonarQube locally, navigate to https://www.sonarsource.com/products/sonarqube/downloads/ >> COMMUNITY EDITION >> download only

- Set environment variables
  SONAR_HOME : C:\Program Files\sonarqube-10.5.1.90531\sonarqube-10.5.1.90531
  SONAR_JAVA_PATH : C:\Program Files\Java\jdk-17\bin\java.exe

  Path : ADD >> C:\Program Files\sonarqube-10.5.1.90531\sonarqube-10.5.1.90531\bin\windows-x86-64
  
- Start the SonarQube service
  C:\binaries\sonarqube-25.1.0.102122\bin\windows-x86-64 >> StartSonar.bat

- Access the SonarQube tool locally
  - Navigate to browser >> localhost:9000
  - Enter credentials - Username: admin | Password: admin

- Update the pom.xml file dependencies for SonarQube
  [https://mvnrepository.com/artifact/org.sonarsource.scanner.maven/sonar-maven-plugin/5.0.0.4389]

  <dependency>
      <groupId>org.sonarsource.scanner.maven</groupId>
      <artifactId>sonar-maven-plugin</artifactId>
      <version>5.0.0.4389</version>
  </dependency>

- Execute the Maven project
  mvn test sonar:sonar -D sonar.login=admin -D sonar.password=<your_password>

- (optional) Create sonar-project.properties
  

- Understand CODE COVERAGE | Add jacoco plugin to pom.xml

# INTEGRATING MAVEN PROJECT+SONARQUBE WITH JENKINS
--------------------------------------------------

- Push the source code to github repo

  A Hello World!” sample written in Java using Maven for the build, that showcases a few very simple tests.

  This example demonstrates:

  A simple Java17 application with tests
  Unit tests written with JUnit 5
  Code coverage reports via JaCoCo
  A Maven build that puts it all together

- Running the tests
  - To run the unit tests, call mvn test
  - To run the integration tests as well, call mvn verify
  - Code coverage reports are generated when mvn verify (or a full mvn clean install) is called. 
  - Point a browser at the output in target/site/jacoco-both/index.html to see the report.

- Unit test
  - resides in: src/test/java/*Test.java
  - executes in Maven phase: test
  - handled by Maven plugin: surefire

Lab-XX - SonarQube Cloud integration with Jenkins
---------------------------------------------------------------------------------------

- Pre-requisites
  Jenkins Server with Maven

- Create an account https://sonarcloud.io >> Sign up >> with Github credentials

- Generate SonarCloud token - Account >> My Account >> Security >> Generate token

- Store the SonarCloud token on Jenkins server - Manage Jenkins >> Credentials >> Secret text >>
  ID: sonar-creds
  Secret: <token_here>

- Download and install "SonarQube scanner" plugins on Jenkins server

- Add SonarQube server info to Jenkins server
  Manage Jenkins >> System >> SonarQube Servers >> Add SonarQube >> 
    Name: sonarqube-server
    Server URL: https://sonarcloud.io/
    Server Authentication token: sonar-creds

- Install SonarScanner on Jenkins server
  Manage Jenkins >> Tools >> SonarQube Scanner >> Add SonarQube Scanner >>
    Name: sonar-scanner
    Install automatically: enable

- Create a SonarQube Organization and Project
  - Create org manually | Plan: Free
  - Create Project | Name | Project-key | Project-visibility: Public
  - Access the project info from the Information section
  
- Create sonar-project.properties
  [Add the values as per above created project & org] 

sonar.verbose=true
sonar.projectKey=prject_key
sonar.organization=project_org
sonar.projectName=project_name
sonar.language=java
sonar.sourceEncoding=UTF-8
sonar.sources=.
sonar.java.binaries=target/classes
sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml


- Add SonarQube stage to the Jenkinsfile

search Jenkins extension for SonarQube >> https://docs.sonarsource.com/sonarqube-server/latest/analyzing-source-code/scanners/jenkins-extension-sonarqube/

pipeline {
    agent any

    environment {
      package_name = 'webapp_package'
    }

    tools {
      maven 'Maven-3.9.8'
      jdk 'Java-17'
    }

    stages {
        stage("Pulling the Code from SCM"){ 
            steps { 
                echo "Cloning the code"
                git url: 'https://github.com/kbindesh/mvn-lab-project.git', branch: 'main'
            }   
        }       
        stage('Clear previous builds') { 
            steps {
              sh 'mvn clean'
            }
        }
        stage('Perform Unit Testing'){
          steps {
            sh 'mvn test'
          }
        }
        stage('Compile and Build the App'){
          steps {
            sh 'mvn package'
          }
        }
        stage('SonarCloud analysis') {
          steps{
            withSonarQubeEnv(credentialsId: 'sonarqube-token', installationName: 'sonarcloud') {
              sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.11.0.3922:sonar'
            }
          }
        }
    }

Lab-XX - Java App deployment on Apache Tomcat server | Integrating Jenkins with Tomcat
---------------------------------------------------------------------------------------

==================
JENKINS PIPELINES
==================

- Introduction
- Pipeline types
  1. Build Pipelines
  2. Delivery Pipelines
- Jenkins Pipeline
- Multi-branch Pipeline

Scenario: There are 3 jobs namely Build job, Test Job, Deployment job
